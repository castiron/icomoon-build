"use strict";

var fs = require("fs");
var console = require("console");
var util = require("util");
var path = require("path");
var childProcess = require("child_process");
var AdmZip = require("adm-zip");
var phantomjs = require("phantomjs-prebuilt");
var binPath = phantomjs.path;
var Handlebars = require("handlebars");

Handlebars.registerHelper('hex', function(number) {
  return new Handlebars.SafeString('\'\\' + number.toString(16) + '\'');
});

function buildStylesheet(selection, fileTemplate) {
    var prefix = selection.preferences.fontPref.prefix;
    var source =
      '// File generated by Icomoon-Build\n' +
      '// Note that any edits to this file will be overridden if the script is run again\n' +
      '// Icons\n' +
      '// --------------------\n' +
      '{{#each icons as |icon index|}}' +
      '${{preferences.fontPref.prefix}}{{icon.properties.name}}: {{{hex icon.properties.code}}};\n' +
      '{{/each}}' +
      '\n\n\n// Icon Font Declaration\n' +
      '// --------------------\n' +
      '@font-face {\n' +
      '  font-family: \'{{metadata.name}}\';\n' +
      '  src: url(\'../fonts/{{metadata.name}}.eot\');\n' +
      '  src: url(\'../fonts/{{metadata.name}}.eot\') format(\'embedded-opentype\'),\n' +
      '  src: url(\'../fonts/{{metadata.name}}.woff\') format(\'woff\'),\n' +
      '  src: url(\'../fonts/{{metadata.name}}.ttf\') format(\'truetype\'),\n' +
      '  src: url(\'../fonts/{{metadata.name}}.svg\') format(\'svg\');\n' +
      '  font-weight: normal;\n' +
      '  font-style: normal;\n' +
      '}' +
      '\n\n\n// Font Family Mixin\n' +
      '// ----------\n' +
      '@mixin font-icon {\n' +
      '  font-family: \'{{metadata.name}}\';\n' +
      '}\n';

    if (fileTemplate) {
      source = fs.readFileSync(fileTemplate, 'utf8');
    }

    var template = Handlebars.compile(source);
    return template(selection);
}

function buildProject(projectFilePath, fileTemplate, cb) {
    var childArgs = [
        "--load-images=false",
        "--ssl-protocol=any",
        path.join(__dirname, "icomoon.phantom.js"),
        projectFilePath
    ];
    childProcess.execFile(binPath, childArgs, {maxBuffer: 102400*1024}, function(err, stdout, stderr) {
        if (err) {
            cb(err);
            return;
        }
        var result;
        try {
            var zipBuf = new Buffer(stdout, "base64");
            var zip = new AdmZip(zipBuf);
            var zipEntries = zip.getEntries(); // an array of ZipEntry records

            result = {
                zip: zipBuf,
                fonts: {}
            };
            zipEntries.forEach(function(zipEntry) {
                if (/.+\/.*\.(ttf|woff|eot|svg)$/.test(zipEntry.entryName)) {
                    result.fonts[zipEntry.name] = {
                        path: zipEntry.entryName,
                        data: zip.readFile(zipEntry),
                    };
                } else if (/^[^\/]+\.css$/.test(zipEntry.entryName)) {
                    result.css = zip.readAsText(zipEntry);
                } else if ("selection.json" === zipEntry.entryName) {
                    result.selection = JSON.parse(zip.readAsText(zipEntry));
                }
            });
            result.styles = buildStylesheet(result.selection, fileTemplate);
        } catch (e) {
            cb(e);
            return;
        }
        cb(null, result);
    });
}

module.exports = {
    buildProject: buildProject
};
